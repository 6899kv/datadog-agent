// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: datadog/api/v1/api.proto

package pbgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// get the hostname
	GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error) {
	out := new(HostnameReply)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.Agent/GetHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// get the hostname
	GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.Agent/GetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetHostname(ctx, req.(*HostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostname",
			Handler:    _Agent_GetHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/api/v1/api.proto",
}

// AgentSecureClient is the client API for AgentSecure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentSecureClient interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (AgentSecure_TaggerStreamEntitiesClient, error)
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error)
	ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error)
	GetConfigState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error)
}

type agentSecureClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentSecureClient(cc grpc.ClientConnInterface) AgentSecureClient {
	return &agentSecureClient{cc}
}

func (c *agentSecureClient) TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (AgentSecure_TaggerStreamEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentSecure_ServiceDesc.Streams[0], "/datadog.api.v1.AgentSecure/TaggerStreamEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSecureTaggerStreamEntitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentSecure_TaggerStreamEntitiesClient interface {
	Recv() (*StreamTagsResponse, error)
	grpc.ClientStream
}

type agentSecureTaggerStreamEntitiesClient struct {
	grpc.ClientStream
}

func (x *agentSecureTaggerStreamEntitiesClient) Recv() (*StreamTagsResponse, error) {
	m := new(StreamTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentSecureClient) TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error) {
	out := new(FetchEntityResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/TaggerFetchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error) {
	out := new(CaptureTriggerResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/DogstatsdCaptureTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error) {
	out := new(TaggerStateResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/DogstatsdSetTaggerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error) {
	out := new(ClientGetConfigsResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/ClientGetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) GetConfigState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error) {
	out := new(GetStateConfigResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/GetConfigState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentSecureServer is the server API for AgentSecure service.
// All implementations must embed UnimplementedAgentSecureServer
// for forward compatibility
type AgentSecureServer interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(*StreamTagsRequest, AgentSecure_TaggerStreamEntitiesServer) error
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error)
	ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error)
	GetConfigState(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error)
	mustEmbedUnimplementedAgentSecureServer()
}

// UnimplementedAgentSecureServer must be embedded to have forward compatible implementations.
type UnimplementedAgentSecureServer struct {
}

func (UnimplementedAgentSecureServer) TaggerStreamEntities(*StreamTagsRequest, AgentSecure_TaggerStreamEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method TaggerStreamEntities not implemented")
}
func (UnimplementedAgentSecureServer) TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggerFetchEntity not implemented")
}
func (UnimplementedAgentSecureServer) DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdCaptureTrigger not implemented")
}
func (UnimplementedAgentSecureServer) DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdSetTaggerState not implemented")
}
func (UnimplementedAgentSecureServer) ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetConfigs not implemented")
}
func (UnimplementedAgentSecureServer) GetConfigState(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigState not implemented")
}
func (UnimplementedAgentSecureServer) mustEmbedUnimplementedAgentSecureServer() {}

// UnsafeAgentSecureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentSecureServer will
// result in compilation errors.
type UnsafeAgentSecureServer interface {
	mustEmbedUnimplementedAgentSecureServer()
}

func RegisterAgentSecureServer(s grpc.ServiceRegistrar, srv AgentSecureServer) {
	s.RegisterService(&AgentSecure_ServiceDesc, srv)
}

func _AgentSecure_TaggerStreamEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).TaggerStreamEntities(m, &agentSecureTaggerStreamEntitiesServer{stream})
}

type AgentSecure_TaggerStreamEntitiesServer interface {
	Send(*StreamTagsResponse) error
	grpc.ServerStream
}

type agentSecureTaggerStreamEntitiesServer struct {
	grpc.ServerStream
}

func (x *agentSecureTaggerStreamEntitiesServer) Send(m *StreamTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentSecure_TaggerFetchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/TaggerFetchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, req.(*FetchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdCaptureTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/DogstatsdCaptureTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, req.(*CaptureTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdSetTaggerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/DogstatsdSetTaggerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, req.(*TaggerState))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_ClientGetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/ClientGetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, req.(*ClientGetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_GetConfigState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetConfigState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/GetConfigState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetConfigState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentSecure_ServiceDesc is the grpc.ServiceDesc for AgentSecure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentSecure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.AgentSecure",
	HandlerType: (*AgentSecureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaggerFetchEntity",
			Handler:    _AgentSecure_TaggerFetchEntity_Handler,
		},
		{
			MethodName: "DogstatsdCaptureTrigger",
			Handler:    _AgentSecure_DogstatsdCaptureTrigger_Handler,
		},
		{
			MethodName: "DogstatsdSetTaggerState",
			Handler:    _AgentSecure_DogstatsdSetTaggerState_Handler,
		},
		{
			MethodName: "ClientGetConfigs",
			Handler:    _AgentSecure_ClientGetConfigs_Handler,
		},
		{
			MethodName: "GetConfigState",
			Handler:    _AgentSecure_GetConfigState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaggerStreamEntities",
			Handler:       _AgentSecure_TaggerStreamEntities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datadog/api/v1/api.proto",
}
