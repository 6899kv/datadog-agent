// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: connectionserver/api.proto

package connectionserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkTracerClient is the client API for NetworkTracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkTracerClient interface {
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (NetworkTracer_GetConnectionsClient, error)
}

type networkTracerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkTracerClient(cc grpc.ClientConnInterface) NetworkTracerClient {
	return &networkTracerClient{cc}
}

func (c *networkTracerClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (NetworkTracer_GetConnectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkTracer_ServiceDesc.Streams[0], "/datadog.agent.systemprobe.NetworkTracer/GetConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkTracerGetConnectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkTracer_GetConnectionsClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type networkTracerGetConnectionsClient struct {
	grpc.ClientStream
}

func (x *networkTracerGetConnectionsClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkTracerServer is the server API for NetworkTracer service.
// All implementations must embed UnimplementedNetworkTracerServer
// for forward compatibility
type NetworkTracerServer interface {
	GetConnections(*GetConnectionsRequest, NetworkTracer_GetConnectionsServer) error
	mustEmbedUnimplementedNetworkTracerServer()
}

// UnimplementedNetworkTracerServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkTracerServer struct {
}

func (UnimplementedNetworkTracerServer) GetConnections(*GetConnectionsRequest, NetworkTracer_GetConnectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedNetworkTracerServer) mustEmbedUnimplementedNetworkTracerServer() {}

// UnsafeNetworkTracerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkTracerServer will
// result in compilation errors.
type UnsafeNetworkTracerServer interface {
	mustEmbedUnimplementedNetworkTracerServer()
}

func RegisterNetworkTracerServer(s grpc.ServiceRegistrar, srv NetworkTracerServer) {
	s.RegisterService(&NetworkTracer_ServiceDesc, srv)
}

func _NetworkTracer_GetConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConnectionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkTracerServer).GetConnections(m, &networkTracerGetConnectionsServer{stream})
}

type NetworkTracer_GetConnectionsServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type networkTracerGetConnectionsServer struct {
	grpc.ServerStream
}

func (x *networkTracerGetConnectionsServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

// NetworkTracer_ServiceDesc is the grpc.ServiceDesc for NetworkTracer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkTracer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.agent.systemprobe.NetworkTracer",
	HandlerType: (*NetworkTracerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConnections",
			Handler:       _NetworkTracer_GetConnections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "connectionserver/api.proto",
}
