// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FileInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsFileInfo(buf []byte, offset flatbuffers.UOffsetT) *FileInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FileInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFileInfo(buf []byte, offset flatbuffers.UOffsetT) *FileInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FileInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FileInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FileInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FileInfo) Uid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *FileInfo) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileInfo) Gid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateGid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *FileInfo) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileInfo) Mode() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateMode(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *FileInfo) Ctime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateCtime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *FileInfo) Mtime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateMtime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *FileInfo) MountId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateMountId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *FileInfo) Inode() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileInfo) MutateInode(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *FileInfo) InUpperLayer() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FileInfo) MutateInUpperLayer(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *FileInfo) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileInfo) Basename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileInfo) Filesystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FileInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func FileInfoAddUid(builder *flatbuffers.Builder, uid uint32) {
	builder.PrependUint32Slot(0, uid, 0)
}
func FileInfoAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(user), 0)
}
func FileInfoAddGid(builder *flatbuffers.Builder, gid uint32) {
	builder.PrependUint32Slot(2, gid, 0)
}
func FileInfoAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(group), 0)
}
func FileInfoAddMode(builder *flatbuffers.Builder, mode uint16) {
	builder.PrependUint16Slot(4, mode, 0)
}
func FileInfoAddCtime(builder *flatbuffers.Builder, ctime uint64) {
	builder.PrependUint64Slot(5, ctime, 0)
}
func FileInfoAddMtime(builder *flatbuffers.Builder, mtime uint64) {
	builder.PrependUint64Slot(6, mtime, 0)
}
func FileInfoAddMountId(builder *flatbuffers.Builder, mountId uint32) {
	builder.PrependUint32Slot(7, mountId, 0)
}
func FileInfoAddInode(builder *flatbuffers.Builder, inode uint64) {
	builder.PrependUint64Slot(8, inode, 0)
}
func FileInfoAddInUpperLayer(builder *flatbuffers.Builder, inUpperLayer bool) {
	builder.PrependBoolSlot(9, inUpperLayer, false)
}
func FileInfoAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(path), 0)
}
func FileInfoAddBasename(builder *flatbuffers.Builder, basename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(basename), 0)
}
func FileInfoAddFilesystem(builder *flatbuffers.Builder, filesystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(filesystem), 0)
}
func FileInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
