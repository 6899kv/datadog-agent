// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DNSInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsDNSInfo(buf []byte, offset flatbuffers.UOffsetT) *DNSInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DNSInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDNSInfo(buf []byte, offset flatbuffers.UOffsetT) *DNSInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DNSInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DNSInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DNSInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DNSInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DNSInfo) Type() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DNSInfo) MutateType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *DNSInfo) Class() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DNSInfo) MutateClass(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *DNSInfo) Size() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DNSInfo) MutateSize(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *DNSInfo) Count() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DNSInfo) MutateCount(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func DNSInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DNSInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DNSInfoAddType(builder *flatbuffers.Builder, type_ uint16) {
	builder.PrependUint16Slot(1, type_, 0)
}
func DNSInfoAddClass(builder *flatbuffers.Builder, class uint16) {
	builder.PrependUint16Slot(2, class, 0)
}
func DNSInfoAddSize(builder *flatbuffers.Builder, size uint16) {
	builder.PrependUint16Slot(3, size, 0)
}
func DNSInfoAddCount(builder *flatbuffers.Builder, count uint16) {
	builder.PrependUint16Slot(4, count, 0)
}
func DNSInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
