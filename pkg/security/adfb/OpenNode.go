// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OpenNode struct {
	_tab flatbuffers.Table
}

func GetRootAsOpenNode(buf []byte, offset flatbuffers.UOffsetT) *OpenNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpenNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOpenNode(buf []byte, offset flatbuffers.UOffsetT) *OpenNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OpenNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OpenNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpenNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OpenNode) Retval() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpenNode) MutateRetval(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *OpenNode) Flags() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpenNode) MutateFlags(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *OpenNode) Mode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpenNode) MutateMode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func OpenNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OpenNodeAddRetval(builder *flatbuffers.Builder, retval int64) {
	builder.PrependInt64Slot(0, retval, 0)
}
func OpenNodeAddFlags(builder *flatbuffers.Builder, flags uint32) {
	builder.PrependUint32Slot(1, flags, 0)
}
func OpenNodeAddMode(builder *flatbuffers.Builder, mode uint32) {
	builder.PrependUint32Slot(2, mode, 0)
}
func OpenNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
