// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Credentials struct {
	_tab flatbuffers.Table
}

func GetRootAsCredentials(buf []byte, offset flatbuffers.UOffsetT) *Credentials {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Credentials{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCredentials(buf []byte, offset flatbuffers.UOffsetT) *Credentials {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Credentials{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Credentials) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Credentials) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Credentials) Uid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Credentials) Gid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateGid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Credentials) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) EffectiveUid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateEffectiveUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Credentials) EffectiveGid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateEffectiveGid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *Credentials) EffectiveUser() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) EffectiveGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) FsUid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateFsUid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *Credentials) FsGid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateFsGid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func (rcv *Credentials) FsUser() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) FsGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Credentials) CapEffective() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateCapEffective(n uint64) bool {
	return rcv._tab.MutateUint64Slot(28, n)
}

func (rcv *Credentials) CapPermitted() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Credentials) MutateCapPermitted(n uint64) bool {
	return rcv._tab.MutateUint64Slot(30, n)
}

func CredentialsStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func CredentialsAddUid(builder *flatbuffers.Builder, uid uint32) {
	builder.PrependUint32Slot(0, uid, 0)
}
func CredentialsAddGid(builder *flatbuffers.Builder, gid uint32) {
	builder.PrependUint32Slot(1, gid, 0)
}
func CredentialsAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(user), 0)
}
func CredentialsAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(group), 0)
}
func CredentialsAddEffectiveUid(builder *flatbuffers.Builder, effectiveUid uint32) {
	builder.PrependUint32Slot(4, effectiveUid, 0)
}
func CredentialsAddEffectiveGid(builder *flatbuffers.Builder, effectiveGid uint32) {
	builder.PrependUint32Slot(5, effectiveGid, 0)
}
func CredentialsAddEffectiveUser(builder *flatbuffers.Builder, effectiveUser flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(effectiveUser), 0)
}
func CredentialsAddEffectiveGroup(builder *flatbuffers.Builder, effectiveGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(effectiveGroup), 0)
}
func CredentialsAddFsUid(builder *flatbuffers.Builder, fsUid uint32) {
	builder.PrependUint32Slot(8, fsUid, 0)
}
func CredentialsAddFsGid(builder *flatbuffers.Builder, fsGid uint32) {
	builder.PrependUint32Slot(9, fsGid, 0)
}
func CredentialsAddFsUser(builder *flatbuffers.Builder, fsUser flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(fsUser), 0)
}
func CredentialsAddFsGroup(builder *flatbuffers.Builder, fsGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(fsGroup), 0)
}
func CredentialsAddCapEffective(builder *flatbuffers.Builder, capEffective uint64) {
	builder.PrependUint64Slot(12, capEffective, 0)
}
func CredentialsAddCapPermitted(builder *flatbuffers.Builder, capPermitted uint64) {
	builder.PrependUint64Slot(13, capPermitted, 0)
}
func CredentialsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
