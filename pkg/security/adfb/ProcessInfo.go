// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProcessInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsProcessInfo(buf []byte, offset flatbuffers.UOffsetT) *ProcessInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProcessInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProcessInfo(buf []byte, offset flatbuffers.UOffsetT) *ProcessInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProcessInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProcessInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProcessInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProcessInfo) Pid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutatePid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ProcessInfo) Tid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateTid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ProcessInfo) Ppid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutatePpid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ProcessInfo) Cookie() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateCookie(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ProcessInfo) IsThread() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProcessInfo) MutateIsThread(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *ProcessInfo) File(obj *FileInfo) *FileInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FileInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProcessInfo) ContainerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProcessInfo) SpanId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateSpanId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *ProcessInfo) TraceId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateTraceId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *ProcessInfo) Tty() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProcessInfo) Comm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProcessInfo) ForkTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateForkTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func (rcv *ProcessInfo) ExitTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateExitTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(28, n)
}

func (rcv *ProcessInfo) ExecTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProcessInfo) MutateExecTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(30, n)
}

func (rcv *ProcessInfo) Credentials(obj *Credentials) *Credentials {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Credentials)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProcessInfo) Args(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProcessInfo) ArgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProcessInfo) Argv0() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProcessInfo) ArgsTruncated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProcessInfo) MutateArgsTruncated(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

func (rcv *ProcessInfo) Envs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProcessInfo) EnvsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProcessInfo) EnvsTruncated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProcessInfo) MutateEnvsTruncated(n bool) bool {
	return rcv._tab.MutateBoolSlot(42, n)
}

func ProcessInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func ProcessInfoAddPid(builder *flatbuffers.Builder, pid uint32) {
	builder.PrependUint32Slot(0, pid, 0)
}
func ProcessInfoAddTid(builder *flatbuffers.Builder, tid uint32) {
	builder.PrependUint32Slot(1, tid, 0)
}
func ProcessInfoAddPpid(builder *flatbuffers.Builder, ppid uint32) {
	builder.PrependUint32Slot(2, ppid, 0)
}
func ProcessInfoAddCookie(builder *flatbuffers.Builder, cookie uint32) {
	builder.PrependUint32Slot(3, cookie, 0)
}
func ProcessInfoAddIsThread(builder *flatbuffers.Builder, isThread bool) {
	builder.PrependBoolSlot(4, isThread, false)
}
func ProcessInfoAddFile(builder *flatbuffers.Builder, file flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(file), 0)
}
func ProcessInfoAddContainerId(builder *flatbuffers.Builder, containerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(containerId), 0)
}
func ProcessInfoAddSpanId(builder *flatbuffers.Builder, spanId uint64) {
	builder.PrependUint64Slot(7, spanId, 0)
}
func ProcessInfoAddTraceId(builder *flatbuffers.Builder, traceId uint64) {
	builder.PrependUint64Slot(8, traceId, 0)
}
func ProcessInfoAddTty(builder *flatbuffers.Builder, tty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(tty), 0)
}
func ProcessInfoAddComm(builder *flatbuffers.Builder, comm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(comm), 0)
}
func ProcessInfoAddForkTime(builder *flatbuffers.Builder, forkTime uint64) {
	builder.PrependUint64Slot(11, forkTime, 0)
}
func ProcessInfoAddExitTime(builder *flatbuffers.Builder, exitTime uint64) {
	builder.PrependUint64Slot(12, exitTime, 0)
}
func ProcessInfoAddExecTime(builder *flatbuffers.Builder, execTime uint64) {
	builder.PrependUint64Slot(13, execTime, 0)
}
func ProcessInfoAddCredentials(builder *flatbuffers.Builder, credentials flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(credentials), 0)
}
func ProcessInfoAddArgs(builder *flatbuffers.Builder, args flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(args), 0)
}
func ProcessInfoStartArgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProcessInfoAddArgv0(builder *flatbuffers.Builder, argv0 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(argv0), 0)
}
func ProcessInfoAddArgsTruncated(builder *flatbuffers.Builder, argsTruncated bool) {
	builder.PrependBoolSlot(17, argsTruncated, false)
}
func ProcessInfoAddEnvs(builder *flatbuffers.Builder, envs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(envs), 0)
}
func ProcessInfoStartEnvsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProcessInfoAddEnvsTruncated(builder *flatbuffers.Builder, envsTruncated bool) {
	builder.PrependBoolSlot(19, envsTruncated, false)
}
func ProcessInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
