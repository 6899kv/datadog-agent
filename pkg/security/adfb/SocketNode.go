// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package adfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SocketNode struct {
	_tab flatbuffers.Table
}

func GetRootAsSocketNode(buf []byte, offset flatbuffers.UOffsetT) *SocketNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SocketNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSocketNode(buf []byte, offset flatbuffers.UOffsetT) *SocketNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SocketNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SocketNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SocketNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SocketNode) Family() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SocketNode) Bind(obj *BindNode) *BindNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BindNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SocketNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SocketNodeAddFamily(builder *flatbuffers.Builder, family flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(family), 0)
}
func SocketNodeAddBind(builder *flatbuffers.Builder, bind flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bind), 0)
}
func SocketNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
