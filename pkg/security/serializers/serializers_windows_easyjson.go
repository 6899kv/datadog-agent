//go:build windows
// +build windows

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package serializers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(in *jlexer.Lexer, out *FileSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(out *jwriter.Writer, in FileSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(l, v)
}
func easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(in *jlexer.Lexer, out *ExecEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				(*out.Executable).UnmarshalEasyJSON(in)
			}
		case "cmd_line":
			out.CmdLine = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(out *jwriter.Writer, in ExecEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Executable).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cmd_line\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CmdLine))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(l, v)
}
func easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(in *jlexer.Lexer, out *EventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ExecEventSerializer = new(ExecEventSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "evt":
			(out.EventContextSerializer).UnmarshalEasyJSON(in)
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.ExecEventSerializer = nil
			} else {
				if out.ExecEventSerializer == nil {
					out.ExecEventSerializer = new(ExecEventSerializer)
				}
				(*out.ExecEventSerializer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(out *jwriter.Writer, in EventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"evt\":"
		first = false
		out.RawString(prefix[1:])
		(in.EventContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	if in.ExecEventSerializer != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExecEventSerializer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(l, v)
}
func easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in *jlexer.Lexer, out *EventContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out *jwriter.Writer, in EventContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15047febEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15047febDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(l, v)
}
