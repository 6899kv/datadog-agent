{{- range .BuildTags }}// {{.}}{{end}}

// Code generated - DO NOT EDIT.

package {{.Name}}

{{$Mock := .Mock}}

import (
	"net"
	"reflect"

	{{if ne $.SourcePkg $.TargetPkg}}"{{.SourcePkg}}"{{end}}
	"github.com/DataDog/datadog-agent/pkg/security/secl/compiler/eval"
)

func (m *Model) GetIterator(field eval.Field) (eval.Iterator, error) {
	switch field {
	{{range $Name, $Field := .Iterators}}
	case "{{$Name}}":
		return &{{$Field.ReturnType}}{}, nil
	{{end}}
	}

	return nil, &eval.ErrIteratorNotSupported{Field: field}
}

func (m *Model) GetEventTypes() []eval.EventType {
	return []eval.EventType{
		{{range $Name, $Exists := .EventTypes}}
			{{- if ne $Name "*"}}
			eval.EventType("{{$Name}}"),
			{{end -}}
		{{end}}
	}
} 

func (m *Model) GetFields() []eval.Field {
	return []eval.Field{
		{{range $Name, $Field := .Fields}}
			"{{$Name}}",
		{{end}}
	}
}

func (m *Model) GetFieldEventType(field eval.Field) (eval.EventType, error) {
	switch field {
	{{range $Name, $Field := .Fields}}
	case "{{$Name}}":
		return "{{$Field.Event}}", nil
	{{end}}
	}

	return "", &eval.ErrFieldNotFound{Field: field}
}

func (m *Model) GetFieldType(field eval.Field) (reflect.Kind, error) {
	switch field {
		{{range $Name, $Field := .Fields}}

		case "{{$Name}}":
		{{if eq $Field.ReturnType "string"}}
			return reflect.String, nil
		{{else if eq $Field.ReturnType "int"}}
			return reflect.Int, nil
		{{else if eq $Field.ReturnType "bool"}}
			return reflect.Bool, nil
        {{else if eq $Field.ReturnType "net.IPNet"}}
            return reflect.Struct, nil
		{{end}}
		{{end}}
	}

	return reflect.Invalid, &eval.ErrFieldNotFound{Field: field}
}


func (e *Event) SetFieldValue(field eval.Field, value interface{}) error {
	switch field {
		{{range $Name, $Field := .Fields}}
		{{$FieldName := $Field.Name | printf "e.%s"}}
		case "{{$Name}}":
			{{- $Field | NewField $.AllFields}}
		{{- if eq $Field.OrigType "string"}}
			str, ok := value.(string)
			if !ok {
				return &eval.ErrValueTypeMismatch{Field: "{{$Field.Name}}"}
			}
			{{- if $Field.IsArray}}
				{{$FieldName}} = append({{$FieldName}}, str)
			{{else}}
				{{$FieldName}} = str
			{{end}}
			return nil
		{{else if eq $Field.BasicType "int"}}
			v, ok := value.(int)
			if !ok {
				return &eval.ErrValueTypeMismatch{Field: "{{$Field.Name}}"}
			}
			{{- if $Field.IsArray}}
				{{$FieldName}} = append({{$FieldName}}, {{$Field.OrigType}}(v))
			{{else}}
				{{$FieldName}} = {{$Field.OrigType}}(v)
			{{end}}
			return nil
		{{else if eq $Field.BasicType "bool"}}
			var ok bool
			if {{$FieldName}}, ok = value.(bool); !ok {
				return &eval.ErrValueTypeMismatch{Field: "{{$Field.Name}}"}
			}
			return nil
        {{else if eq $Field.BasicType "net.IPNet"}}
            v, ok := value.(net.IPNet)
            if !ok {
                return &eval.ErrValueTypeMismatch{Field: "{{$Field.Name}}"}
            }
			{{- if $Field.IsArray}}
                {{$FieldName}} = append({{$FieldName}}, v)
            {{else}}
                {{$FieldName}} = v
            {{end}}
			return nil
		{{end}}
		{{end}}
		}

		return &eval.ErrFieldNotFound{Field: field}
}