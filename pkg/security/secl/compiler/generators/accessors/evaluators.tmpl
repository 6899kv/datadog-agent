{{- range .BuildTags }}// {{.}}{{end}}

// Code generated - DO NOT EDIT.

package {{.Name}}

import (
	"net"
	"unsafe"

	{{if ne $.SourcePkg $.TargetPkg}}"{{.SourcePkg}}"{{end}}
	"github.com/DataDog/datadog-agent/pkg/security/secl/compiler/eval"
)

// suppress unused package warning
var (
	_ *unsafe.Pointer
)

{{$Mock := .Mock}}

func GetEvaluator(field eval.Field, regID eval.RegisterID) (eval.Evaluator, error) {
	switch field {
	{{range $Name, $Field := .Fields}}
	case "{{$Name}}":
		return &{{$Field.GetEvaluatorType}}{
			{{- if $Field.OpOverrides}}
			OpOverrides: {{$Mock | Override $Field.OpOverrides}},
			{{- end}}
			{{- if $Field.Iterator}}
				EvalFnc: func(ctx *eval.Context) []{{$Field.ReturnType}} {
					{{- if not $Mock }}
					if ptr := ctx.Cache[field]; ptr != nil {
						if result := (*[]{{$Field.ReturnType}})(ptr); result != nil {
							return *result
						}
					}
					{{end -}}

					var results []{{$Field.ReturnType}}

					iterator := &{{$Field.Iterator.ReturnType}}{}
					event := GetEvent(ctx)

					value := iterator.Front(event)
					for value != nil {
						{{if $Field.Iterator.IsOrigTypePtr}}
							element := value.(*{{$Field.Iterator.OrigType}})
						{{else}}
							element := *value.(*{{$Field.Iterator.OrigType}})
						{{end}}

						{{$SubName := $Field.Iterator.Name | TrimPrefix $Field.Name}}

						{{$Return := $SubName | printf "element%s"}}
						{{if and (ne $Field.Handler "") (not $Mock) }}
							{{$SubName = $Field.Iterator.Name | TrimPrefix $Field.Prefix}}
							{{$Handler := $Field.Iterator.Name | TrimPrefix $Field.Handler}}
							{{$Return = print "event." $Handler "(&element" $SubName ")"}}
						{{end}}

						{{if eq $Field.ReturnType "int"}}
							result := int({{$Return}})
						{{else}}
							result := {{$Return}}
						{{end}}

						{{if eq $Field.GetArrayPrefix ""}}
						results = append(results, result)
						{{else}}
						results = append(results, result...)
						{{end}}

						value = iterator.Next()
					}

					{{- if not $Mock }}
					ctx.Cache[field] = unsafe.Pointer(&results)
					{{end}}

					return results
				},
			{{- else}}
				{{- $ReturnType := $Field.ReturnType}}
				EvalFnc: func(ctx *eval.Context) {{$Field.GetArrayPrefix}}{{$ReturnType}} {
					event := GetEvent(ctx)
					{{$Return := $Field.Name | printf "event.%s"}}
					{{- if and (ne $Field.Handler "") (not $Mock)}}
						{{$Ptr := "&"}}
						{{$Parent := index $.AllFields $Field.Prefix}}
						{{- if $Parent.IsOrigTypePtr}}
							{{$Ptr = ""}}
						{{end}}

						{{$Return = print "event." $Field.Handler "(" $Ptr "event." $Field.Prefix ")"}}
					{{end}}

					{{- if eq $ReturnType "int"}}
						{{- if and ($Field.IsArray) (ne $Field.OrigType "int") }}
							result := make([]int, len({{$Return}}))
							for i, v := range {{$Return}} {
								result[i] = int(v)
							}
							return result
						{{- else}}
							{{- if ne $Field.OrigType "int"}}
								return int({{$Return}})
							{{- else}}
								return {{$Return}}
							{{end -}}
						{{end -}}
					{{- else}}
						return {{$Return}}
					{{end -}}
				},
			{{end -}}
			Field: field,
			{{- if $Field.Iterator}}
				{{- if gt $Field.Weight 0}}
				Weight: {{$Field.Weight}} * eval.IteratorWeight,
				{{else}}
				Weight: eval.IteratorWeight,
				{{end}}
			{{else if $Field.Handler}}
				{{- if gt $Field.Weight 0}}
					Weight: {{$Field.Weight}} * eval.HandlerWeight,
				{{else}}
					Weight: eval.HandlerWeight,
				{{end -}}
			{{else}}
				Weight: eval.FunctionWeight,
			{{end}}
		}, nil
	{{end}}
	}

	return nil, &eval.ErrFieldNotFound{Field: field}
}