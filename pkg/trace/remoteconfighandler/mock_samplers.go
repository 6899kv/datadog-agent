// Code generated by MockGen. DO NOT EDIT.
// Source: remote_config_handler.go

package remoteconfighandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocksamplerWithTPS is a mock of samplerWithTPS interface.
type MocksamplerWithTPS struct {
	ctrl     *gomock.Controller
	recorder *MocksamplerWithTPSMockRecorder
}

// MocksamplerWithTPSMockRecorder is the mock recorder for MocksamplerWithTPS.
type MocksamplerWithTPSMockRecorder struct {
	mock *MocksamplerWithTPS
}

// NewMocksamplerWithTPS creates a new mock instance.
func NewMocksamplerWithTPS(ctrl *gomock.Controller) *MocksamplerWithTPS {
	mock := &MocksamplerWithTPS{ctrl: ctrl}
	mock.recorder = &MocksamplerWithTPSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksamplerWithTPS) EXPECT() *MocksamplerWithTPSMockRecorder {
	return m.recorder
}

// UpdateTargetTPS mocks base method.
func (m *MocksamplerWithTPS) UpdateTargetTPS(targetTPS float64, remotelyConfigured bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTargetTPS", targetTPS, remotelyConfigured)
}

// UpdateTargetTPS indicates an expected call of UpdateTargetTPS.
func (mr *MocksamplerWithTPSMockRecorder) UpdateTargetTPS(targetTPS, remotelyConfigured interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetTPS", reflect.TypeOf((*MocksamplerWithTPS)(nil).UpdateTargetTPS), targetTPS, remotelyConfigured)
}

// MockrareSampler is a mock of rareSampler interface.
type MockrareSampler struct {
	ctrl     *gomock.Controller
	recorder *MockrareSamplerMockRecorder
}

// MockrareSamplerMockRecorder is the mock recorder for MockrareSampler.
type MockrareSamplerMockRecorder struct {
	mock *MockrareSampler
}

// NewMockrareSampler creates a new mock instance.
func NewMockrareSampler(ctrl *gomock.Controller) *MockrareSampler {
	mock := &MockrareSampler{ctrl: ctrl}
	mock.recorder = &MockrareSamplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrareSampler) EXPECT() *MockrareSamplerMockRecorder {
	return m.recorder
}

// SetEnabled mocks base method.
func (m *MockrareSampler) SetEnabled(enabled, remotelyConfigured bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnabled", enabled, remotelyConfigured)
}

// SetEnabled indicates an expected call of SetEnabled.
func (mr *MockrareSamplerMockRecorder) SetEnabled(enabled, remotelyConfigured interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabled", reflect.TypeOf((*MockrareSampler)(nil).SetEnabled), enabled, remotelyConfigured)
}
