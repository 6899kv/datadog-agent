/* Generated by re2c 3.0 on Wed Dec 14 22:02:00 2022 */
#line 1 "regex_libtls.re"
// re2c regex_libtls.re -o regex_libtls.h
#ifdef UNITTEST
#include <assert.h>
#include <stdio.h>
#ifndef __always_inline
#define __always_inline inline
#endif
#endif

// return 1 if the regex match
// return 0 otherwise
static __always_inline int regex_libtls(const char *str, unsigned int len) {
    const char *YYCURSOR = str;//, *YYLIMIT = str + len;//, *YYMARKER;
    int count = 0;

    
#line 21 "regex_libtls.h"
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
//		case 0x00:
//			if (YYLIMIT <= YYCURSOR) goto yy23;
//			goto yy2;
		case '/': goto yy3;
		default: goto yy1;
	}
yy1:
//yy2:
	++YYCURSOR;
#line 30 "regex_libtls.re"
	{ return count; }
#line 37 "regex_libtls.h"
yy3:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'l': goto yy4;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy4:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'i': goto yy5;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy5:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'b': goto yy6;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy6:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'c': goto yy7;
		case 'g': goto yy8;
		case 's': goto yy9;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy7:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'r': goto yy10;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy8:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'n': goto yy11;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy9:
	yych = *++YYCURSOR;
	switch (yych) {
		case 's': goto yy12;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy10:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'y': goto yy13;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy11:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'u': goto yy14;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy12:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'l': goto yy15;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy13:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'p': goto yy16;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy14:
	yych = *++YYCURSOR;
	switch (yych) {
		case 't': goto yy17;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy15:
	yych = *++YYCURSOR;
	switch (yych) {
		case '.': goto yy18;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy16:
	yych = *++YYCURSOR;
	switch (yych) {
		case 't': goto yy19;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy17:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'l': goto yy20;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy18:
	yych = *++YYCURSOR;
	switch (yych) {
		case 's': goto yy21;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy19:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'o': goto yy15;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy20:
	yych = *++YYCURSOR;
	switch (yych) {
		case 's': goto yy15;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy21:
	yych = *++YYCURSOR;
	switch (yych) {
		case 'o': goto yy22;
		default: { ++YYCURSOR; return count; } //goto yy1;
	}
yy22:
	++YYCURSOR;
#line 31 "regex_libtls.re"
	{ return 1; }
#line 158 "regex_libtls.h"
/* yy23: */
/* #line 29 "regex_libtls.re" */
/* 	{ return count; } */
#line 162 "regex_libtls.h"
}
#line 32 "regex_libtls.re"

    return 0;
}

#ifdef UNITTEST
#define TEST(s, size, r) assert(regex_libtls(s, size) == r)
int main() {
    // return 1 when the regex match
    TEST("/usr/libssl.so", sizeof("/usr/libssl.so"), 1);
    TEST("/usr/libsslz.so", sizeof("/usr/libsslz.so"), 0);
    TEST("/usr/libssl.so", sizeof("/usr/libssl.so")-1, 1); // no tailing \0
    TEST("/usr/libssl.so.1", sizeof("/usr/libssl.so.1"), 1);
    TEST("/usr/libcrypto.so.1", sizeof("/usr/libcrypto.so.1"), 1);
    TEST("/usr/libgnutls.so.1", sizeof("/usr/libgnutls.so.1"), 1);
    TEST("/usr/libssl.so.1.2", sizeof("/usr/libssl.so.1.2"), 1);
    TEST("/usr/libcrypto.so.1.2", sizeof("/usr/libcrypto.so.1.2"), 1);
    TEST("/usr/libgnutls.so.1.2", sizeof("/usr/libgnutls.so.1.2"), 1);
    printf("UNITTEST regex_libtls Success\n");
    return 0;
}
#endif
