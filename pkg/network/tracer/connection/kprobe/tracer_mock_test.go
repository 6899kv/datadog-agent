// Code generated by MockGen. DO NOT EDIT.
// Source: tracer.go

// Package kprobe is a generated GoMock package.
package kprobe

import (
	reflect "reflect"

	ebpf "github.com/DataDog/datadog-agent/pkg/ebpf"
	config "github.com/DataDog/datadog-agent/pkg/network/config"
	manager "github.com/DataDog/ebpf-manager"
	gomock "github.com/golang/mock/gomock"
)

// MocktracerLoader is a mock of tracerLoader interface.
type MocktracerLoader struct {
	ctrl     *gomock.Controller
	recorder *MocktracerLoaderMockRecorder
}

// MocktracerLoaderMockRecorder is the mock recorder for MocktracerLoader.
type MocktracerLoaderMockRecorder struct {
	mock *MocktracerLoader
}

// NewMocktracerLoader creates a new mock instance.
func NewMocktracerLoader(ctrl *gomock.Controller) *MocktracerLoader {
	mock := &MocktracerLoader{ctrl: ctrl}
	mock.recorder = &MocktracerLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktracerLoader) EXPECT() *MocktracerLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MocktracerLoader) Load(arg0 *config.Config, arg1 *manager.Manager, arg2 manager.Options, arg3 *ebpf.PerfHandler) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MocktracerLoaderMockRecorder) Load(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MocktracerLoader)(nil).Load), arg0, arg1, arg2, arg3)
}
