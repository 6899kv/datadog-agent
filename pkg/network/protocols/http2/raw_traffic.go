package http2

import "encoding/binary"

var (
	// http2 magic
	magicFrame = []byte{
		0x50, 0x52, 0x49, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x53, 0x4d, 0x0d, 0x0a, 0x0d, 0x0a,
	}

	// http2 settings frame
	settingsFrame = []byte{
		0x00, 0x00, 0x00, // length
		0x04,                   // type
		0x00,                   // flags
		0x00, 0x00, 0x00, 0x00, // stream id
	}

	// http2 request to path /aaa
	request = []byte{
		0x00, 0x00, 0x37, // length
		0x01,                   // type
		0x04,                   // flags
		0x00, 0x00, 0x00, 0x03, // stream id
		0x41, 0x8a, 0x08, 0x9d, 0x5c, 0x0b, 0x81, 0x70, 0xdc, 0x78, 0x0f, 0x0b, 0x83, 0x45, 0x83, 0x60,
		0x63, 0x1f, 0x86, 0x5f, 0x8b, 0x1d, 0x75, 0xd0, 0x62, 0x0d, 0x26, 0x3d, 0x4c, 0x74, 0x41, 0xea,
		0x5c, 0x01, 0x34, 0x50, 0x83, 0x9b, 0xd9, 0xab, 0x7a, 0x8d, 0xc4, 0x75, 0xa7, 0x4a, 0x6b, 0x58,
		0x94, 0x18, 0xb5, 0x25, 0x81, 0x2e, 0x0f,
	}

	// data frame & end of stream
	dataFrame = []byte{
		0x00, 0x00, 0x04, // length
		0x00,                   // type
		0x01,                   // flags
		0x00, 0x00, 0x00, 0x03, // stream id
		0x74, 0x65, 0x73, 0x74, // data
	}

	// http2 rst frame
	rstFrame = []byte{
		0x00, 0x00, 0x04, // length
		0x03,                   // type
		0x00,                   // flags
		0x00, 0x00, 0x01, 0x05, // stream id
		0x00, 0x00, 0x00, 0x05, // error code
	}
)

func NewSettingFrame(size uint32) []byte {
	result := make([]byte, len(settingsFrame))
	copy(result, settingsFrame)
	result[2] = byte(size)
	return result
}

// CreateRawRequestFrame creates a raw request frame with the given streamID.
func CreateRawRequestFrame(streamID int) []byte {
	binary.BigEndian.PutUint16(request[7:9], uint16(streamID))
	return request
}

// CreateRawRequestFrame creates a raw request frame with the given streamID.
func CreateRawDataFrame(streamID int) []byte {
	binary.BigEndian.PutUint16(dataFrame[7:9], uint16(streamID))
	return dataFrame
}

func CreateRawMagicFrame() []byte {
	return magicFrame
}
