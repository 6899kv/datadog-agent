// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

//go:build windows && npm

package http

import (
	"fmt"
	"sync"
	"testing"
	"time"

	nethttp "net/http"

	"github.com/DataDog/datadog-agent/pkg/network/config"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func testSitePort(t *testing.T, etw *EtwInterface, port int, site string) {

	var txns []WinHttpTransaction
	var ok bool

	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case trans, tok := <-etw.DataChannel:
				// there is spurious other traffic from other powershell/.net things going on
				// skip transactions we're sure aren't generated by this test.
				for _, tx := range trans {
					if tx.AppPool != "<<unnamed>>" {
						txns = append(txns, tx)
						ok = tok
					}
				}
			}
			if len(txns) > 0 {
				break
			}
		}

	}()

	resp, err := nethttp.Get(fmt.Sprintf("http://localhost:%d", port))
	require.NoError(t, err)
	_ = resp.Body.Close()

	wg.Wait()
	assert.Equal(t, 1, len(txns))
	assert.Equal(t, true, ok)
	tx := txns[0]
	assert.Equal(t, uint16(port), tx.Txn.Tup.LocalPort)
	assert.Equal(t, "DefaultAppPool", tx.AppPool)
	assert.Equal(t, site, tx.SiteName)

}

func TestEtwTransactions(t *testing.T) {
	cfg := config.New()
	cfg.EnableHTTPMonitoring = true
	cfg.EnableNativeTLSMonitoring = true

	etw := NewEtwInterface(cfg)
	etw.SetCapturedProtocols(true, true)
	etw.StartReadingHttpFlows()

	time.Sleep(time.Second)
	t.Run("Test default site", func(t *testing.T) {
		testSitePort(t, etw, 80, "Default Web Site")
	})
	t.Run("Test site1", func(t *testing.T) {
		testSitePort(t, etw, 8080, "TestSite1")
	})
	t.Run("Test site2", func(t *testing.T) {
		testSitePort(t, etw, 8081, "TestSite2")
	})
	etw.Close()

}
