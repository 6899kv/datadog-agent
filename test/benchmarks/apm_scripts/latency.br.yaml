setup:
  workdir: /tmp/benchmarks/
  steps:
  - run: |
      WORKDIR=$(pwd)/$RANDOM
      mkdir -p $WORKDIR
      echo "WORKDIR=$WORKDIR" >> $R_PASS_ENV
  - unpack_oci_artifact: registry.ddbuild.io/apm-reliability-environment/trace-agent-payloads:latest
    dest: payloads
  - create_git_worktree_at: ${R_REPOSITORY_ROOT}/dev/br-main
    branch: origin/main
    store_path_in_env: MAIN_BRANCH_DIR
  - workdir: $ARTIFACTS_DIR
    run: pwd;sleep 100; rm * || true 
env:
  ARTIFACTS_DIR: "${ARTIFACTS_DIR:-/tmp/benchmarks/artifacts/v3}"
  LENGHT_OF_RUN: 60s
  CI_JOB_ID: ${CI_JOB_ID:-42}
  CI_COMMIT_REF_NAME: "${CI_COMMIT_REF_NAME:-localtest}"
  DD_API_KEY: ${DD_API_KEY:-deadbeeffacefeeddeadbeeffacefeed}
  DD_LOG_LEVEL: error
  DD_APM_MAX_MEMORY: 5GB
  DD_APM_MAX_CPU_PERCENT: "200"
  DD_APM_REMOTE_TAGGER: "false"
  K6_STATSD_ENABLE_TAGS: "true"
  K6_STATSD_ADDR: $STATSD_URL
configurations: 
  - name: k6_basic
    workdir: $WORKDIR
    setup: 
      steps:
      - unpack_oci_artifact: registry.ddbuild.io/apm-reliability-environment/trace-agent-payloads:latest
        dest: payloads
      - run: |
          cp $R_ROOT_DIR/k6/*.js ./
          echo "K6_ROOT=$(pwd)" >> $R_PASS_ENV
    env: 
      MAIN_BRANCH_RESULT: $ARTIFACTS_DIR/main.json
      PR_BRANCH_RESULT: $ARTIFACTS_DIR/pr.json
    experiments:
      - name: branch-agent
        services:
          - name: "trace-agent-current"
            workdir: $REPOSITORY_ROOT
            startup_probe:
              url: http://localhost:8126/info
              period_secs: 1
            assign_cpus: 8
            run: |
              killall trace-agent
              exec go run ./cmd/trace-agent -config ./cfg.yaml
        execute:
          assign_cpus: 2
          workdir: $ARTIFACTS_DIR
          script: |
            exec k6 run \
            --duration $LENGHT_OF_RUN \
            --no-usage-report \
            --tag test_run_id=${R_EXPERIMENT_NAME} \
            --tag ci_job_id=$CI_JOB_ID \
            --out json="${R_EXPERIMENT_NAME}.json" \
            $K6_ROOT/basic.js
        teardown:
          steps:
          - sdk_image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
            workdir: $ARTIFACTS_DIR
            run_with_sdk: |
              exec benchmark_analyzer convert \
                --framework=K6 \
                --outpath="${PR_BRANCH_RESULT}" \
                "${R_EXPERIMENT_NAME}.json"

      - name: trace-agent-master
        services:
          - name: "trace-agent-master"
            workdir: $MAIN_BRANCH_DIR
            startup_probe:
              url: http://localhost:8126/info
              period_secs: 1
            assign_cpus: 8
            run: |
              killall trace-agent
              exec go run ./cmd/trace-agent -config ./cfg.yaml
            
        execute:
          assign_cpus: 2
          workdir: $ARTIFACTS_DIR
          script: |
            exec k6 run \
            --duration $LENGHT_OF_RUN \
            --no-usage-report \
            --tag test_run_id=${R_EXPERIMENT_NAME} \
            --tag ci_job_id=$CI_JOB_ID \
            --out json="${R_EXPERIMENT_NAME}.json" \
            --out csv=${R_EXPERIMENT_NAME}.csv \
            $K6_ROOT/basic.js
        teardown:
          steps:
          - sdk_image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
            workdir: $ARTIFACTS_DIR
            run_with_sdk: |
              benchmark_analyzer convert \
                --framework=K6 \
                --outpath="${MAIN_BRANCH_RESULT}" \
                "${R_EXPERIMENT_NAME}.json"
    teardown:
      steps:
      - sdk_image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
        workdir: $ARTIFACTS_DIR
        run_with_sdk: |
          mkdir reports -p 
          exec benchmark_analyzer compare pairwise \
            --outpath reports/report.md \
            --framework=K6 \
            --format md $MAIN_BRANCH_RESULT $PR_BRANCH_RESULT
      - sdk_image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
        workdir: $ARTIFACTS_DIR
        run_with_sdk: |
          mkdir reports -p 
          exec benchmark_analyzer compare pairwise \
            --outpath reports/report_full.html \
            --framework=K6 \
            --format html $MAIN_BRANCH_RESULT $PR_BRANCH_RESULT

