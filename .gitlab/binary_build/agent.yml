.iot_agent_build_common_linux:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  script:
    - source /root/.bashrc
    - !reference [.setup_ruby_mirror_linux]
    - !reference [.setup_python_mirror_linux]
    - !reference [.retrieve_linux_go_deps]
    - echo "About to build for $RELEASE_VERSION_7"
    - echo "Detected host architecture $(uname -m)"
    # $DD_TARGET_ARCH is only set by Arm build images, so assume amd64 if not present
    - echo "Target architecture ${DD_TARGET_ARCH:=amd64}"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --skip-packaging --flavor iot --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod" ${USE_S3_CACHING}
    - ls -la $OMNIBUS_PACKAGE_DIR
    - $S3_CP_CMD $OMNIBUS_PACKAGE_DIR/datadog-iot-agent*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DEB
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_CPU_REQUEST: 8
    KUBERNETES_MEMORY_REQUEST: "16Gi"
    KUBERNETES_MEMORY_LIMIT: "16Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

.agent_build_common_linux:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  script:
    - source /root/.bashrc
    - !reference [.setup_ruby_mirror_linux]
    - !reference [.setup_python_mirror_linux]
    - !reference [.retrieve_linux_go_deps]
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - tar -xf $CI_PROJECT_DIR/sysprobe-build-outputs.tar.xz
    - mkdir -p /tmp/system-probe
    - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/clang-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/clang-bpf
    - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/llc-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/llc-bpf
    - cp $CI_PROJECT_DIR/minimized-btfs.tar.xz /tmp/system-probe/minimized-btfs.tar.xz
    - chmod 0744 /tmp/system-probe/clang-bpf /tmp/system-probe/llc-bpf
    - inv -e agent.omnibus-build --skip-packaging --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe ${FLAVOR:+--flavor $FLAVOR}
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
    KUBERNETES_CPU_REQUEST: 16
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

agent-build-linux-x64-a6:
  extends: .agent_build_common_linux
  rules:
    !reference [.on_a6]
  stage: package_build
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check", "build_system-probe-x64", "go_deps", "generate_minimized_btfs_x64"]
  variables:
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: amd64
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_6

agent-build-linux-x64-a7:
  extends: .agent_build_common_linux
  rules:
    !reference [.on_a7]
  stage: package_build
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check", "build_system-probe-x64", "go_deps", "generate_minimized_btfs_x64"]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

iot-agent-build-linux-x64-a7:
  extends: .iot_agent_build_common_linux
  rules:
    !reference [.on_a7]
  stage: package_build
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check", "go_deps"]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7
