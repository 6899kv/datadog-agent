.pull_test_dockers:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  needs: []
  tags: ["runner:docker"]
  rules:
    !reference [ .on_system_probe_changes_or_manual ]
  stage: kernel_matrix_testing
  script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
    # Pull base images
    - mkdir $KITCHEN_DOCKERS
    - inv -e system-probe.save-test-dockers --output-dir $KITCHEN_DOCKERS --arch $ARCH
  artifacts:
    expire_in: 1 day
    paths:
      - $KITCHEN_DOCKERS
  variables:
    KITCHEN_DOCKERS: $DD_AGENT_TESTING_DIR/kitchen-dockers-$ARCH

pull_test_dockers_x64:
  extends: .pull_test_dockers
  variables:
    ARCH: amd64

pull_test_dockers_arm64:
  extends: .pull_test_dockers
  variables:
    ARCH: arm64

.kernel_matrix_testing_new_profile:
  - mkdir -p ~/.aws
  - set +x
  - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
  - set -x
  - export AWS_PROFILE=agent-qa-ci

kernel_matrix_testing_setup_env:
  extends:
    - .kitchen_ec2_location_us_east_1
  stage: kernel_matrix_testing
  rules:
    !reference [.on_system_probe_changes_or_manual]
  allow_failure: true
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:7c39524b
  needs: ["go_deps", "go_tools_deps"]
  tags: ["arch:amd64"]
  variables:
    EC2_X86_INSTANCE_TYPE: $X86_INSTANCES
    EC2_ARM_INSTANCE_TYPE: "m6g.metal"
    X86_AMI_ID: $KERNEL_MATRIX_TESTING_X86_AMI_ID
    ARM_AMI_ID: $KERNEL_MATRIX_TESTING_ARM_AMI_ID
    AWS_REGION: us-east-1
    LibvirtSSHKeyX86: $CI_PROJECT_DIR/libvirt_rsa-x86
    LibvirtSSHKeyARM: $CI_PROJECT_DIR/libvirt_rsa-arm
    STACK_DIR: $CI_PROJECT_DIR/stack.dir
    # The ssh key is created by the pulumi scenario, to be used for creating
    # instances in the build-stable account. We reuse this file to ssh into
    # the instances in subsequent jobs.
    AWS_EC2_SSH_KEY_FILE: $CI_PROJECT_DIR/ssh_key
    AWS_EC2_SSH_KEY_NAME: datadog-agent-ci
    INFRA_ENV: "aws/agent-qa"
    PIPELINE_ID: $CI_PIPELINE_ID
    TEAM: "ebpf-platform"
  before_script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.kernel_matrix_testing_new_profile]
  script:
    - echo "s3://dd-pulumi-state/$CI_PIPELINE_ID/$CI_JOB_ID/pulumi?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE" > $STACK_DIR
    - pulumi login $(cat $STACK_DIR | tr -d '\n')
    - set +x
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.ssh_key --with-decryption --query "Parameter.Value" --out text > $AWS_EC2_SSH_KEY_FILE
    - set -x
    # Without the newline ssh silently fails and moves on to try other auth methods
    - echo "" >> $AWS_EC2_SSH_KEY_FILE
    - chmod 600 $AWS_EC2_SSH_KEY_FILE
    - inv -e system-probe.test-microvms --instance-type-x86=$EC2_X86_INSTANCE_TYPE --instance-type-arm=$EC2_ARM_INSTANCE_TYPE --x86-ami-id=$X86_AMI_ID --arm-ami-id=$ARM_AMI_ID --ssh-key-name=$AWS_EC2_SSH_KEY_NAME --ssh-key-path=$AWS_EC2_SSH_KEY_FILE --infra-env=$INFRA_ENV --subnet $SUBNETS
    - cat $CI_PROJECT_DIR/stack.outputs
    - pulumi logout
  artifacts:
    when: always
    paths:
      - $LibvirtSSHKeyX86
      - $LibvirtSSHKeyX86.pub
      - $LibvirtSSHKeyARM
      - $LibvirtSSHKeyARM.pub
      - $STACK_DIR
      - $CI_PROJECT_DIR/stack.outputs
      - $AWS_EC2_SSH_KEY_FILE
  parallel:
    matrix:
      #- SUBNETS: ["subnet-03061a1647c63c3c3", "subnet-071213aedb0e1ae54", "subnet-0f1ca3e929eb3fb8b"]
      - SUBNETS: ["subnet-03061a1647c63c3c3"]
        X86_INSTANCES: ["m5.metal"]
        TIMES: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]

