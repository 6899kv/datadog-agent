---
# deps_build stage
# Contains jobs which build various libraries needed for system-probe.

.build_clang_common:
  rules:
    !reference [.manual]
  stage: deps_build
  before_script:
    # HACK: empty the build directory cache (that can come from previous runs)
    #       to not have remainders of previous runs, which can make our deps bootstrapping logic fail.
    # TODO: remove this once we switch to k8s runners, they won't have this problem
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -depth  # -delete implies -depth
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -delete || true  # Allow failure, we can't remove parent folders of datadog-agent
  script:
    # use tmpdir to prevent git remote capture by clang build
    - mkdir /tmp/clangbuild && cd /tmp/clangbuild
    - CLANG_MAJOR_VER=$(echo "${CLANG_LLVM_VER}" | cut -d '.' -f 1)
    - CLANG_SHA256SUM=6e912133bcf56e9cfe6a346fa7e5c52c2cde3e4e48b7a6cc6fcc7c75047da45f
    - LLVM_SHA256SUM=7d9a8405f557cefc5a21bf5672af73903b64749d9bc3a50322239f56f34ffddf
    - wget ${GENERAL_ARTIFACTS_CACHE_BUCKET_URL}/llvm/clang-${CLANG_LLVM_VER}.src.tar.xz -O clang.src.tar.xz
    - wget ${GENERAL_ARTIFACTS_CACHE_BUCKET_URL}/llvm/llvm-${CLANG_LLVM_VER}.src.tar.xz -O llvm.src.tar.xz
    - echo -e "${LLVM_SHA256SUM} llvm.src.tar.xz\n${CLANG_SHA256SUM} clang.src.tar.xz" | sha256sum --check -
    - mkdir clang && tar xf clang.src.tar.xz --strip-components=1 --no-same-owner -C clang
    - mkdir llvm && tar xf llvm.src.tar.xz --strip-components=1 --no-same-owner -C llvm
    - mkdir build && cd build
    # copy llvm cmake modules into the correct directory to ensure discovery
    # Build runs into this issue if the correct modules cannot be discovered:
    # https://github.com/llvm/llvm-project/issues/53281
    - cp ../llvm/Modules/* ../llvm/cmake/modules || echo "LLVM common cmake utils not found in directory 'Modules'"
    # patch references to glibc >= 2.18
    - patch -ruN ../llvm/CMakeLists.txt < $CI_PROJECT_DIR/pkg/ebpf/c/cmakelists.patch
    - patch -ruN ../llvm/lib/Analysis/ConstantFolding.cpp < $CI_PROJECT_DIR/pkg/ebpf/c/constant_folding.patch
    - |
      cmake -DLLVM_ENABLE_PROJECTS=clang \
      -DLLVM_TARGETS_TO_BUILD="BPF" \
      -DCMAKE_INSTALL_PREFIX=$DATADOG_AGENT_EMBEDDED_PATH \
      -G "Ninja" \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DLLVM_BUILD_TOOLS=ON \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
      -DLLVM_ENABLE_BINDINGS=OFF \
      -DLLVM_PARALLEL_COMPILE_JOBS=4 \
      -DLLVM_PARALLEL_LINK_JOBS=4 \
      -DLLVM_ENABLE_UNWIND_TABLES=OFF \
      ../llvm
    - cmake --build . --target install
    # fail if references to glibc >= 2.18
    - objdump -p $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} | egrep 'GLIBC_2\.(1[8-9]|[2-9][0-9])' && exit 1
    - objdump -p $DATADOG_AGENT_EMBEDDED_PATH/bin/llc | egrep 'GLIBC_2\.(1[8-9]|[2-9][0-9])' && exit 1
    # fail if clang or llc targets anything other than bpf
    - $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} -print-targets > clang_targets.txt
    - diff $CI_PROJECT_DIR/pkg/ebpf/c/expected_targets.txt clang_targets.txt
    - $DATADOG_AGENT_EMBEDDED_PATH/bin/llc --version | tail -n +7 > llc_targets.txt # remove first 6 lines of llc version output; we only care about the registered targets
    - diff $CI_PROJECT_DIR/pkg/ebpf/c/expected_targets.txt llc_targets.txt
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $S3_PERMANENT_ARTIFACTS_URI/clang-${CLANG_LLVM_VER}.${ARCH}
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $S3_PERMANENT_ARTIFACTS_URI/llc-${CLANG_LLVM_VER}.${ARCH}
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $S3_DD_AGENT_OMNIBUS_LLVM_URI/clang-${CLANG_LLVM_VER}.${ARCH} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $S3_DD_AGENT_OMNIBUS_LLVM_URI/llc-${CLANG_LLVM_VER}.${ARCH} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - mkdir -p $CI_PROJECT_DIR/.tmp
    - cp $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $CI_PROJECT_DIR/.tmp/clang
    - cp $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $CI_PROJECT_DIR/.tmp/llc
  timeout: 2h 00m
  artifacts:
    expire_in: 2 weeks
    paths:
      - $CI_PROJECT_DIR/.tmp/clang
      - $CI_PROJECT_DIR/.tmp/llc

build_clang_x64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:main"]
  variables:
    ARCH: amd64

build_clang_arm64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

.build_omnibus-nikos_common:
  stage: deps_build
  rules:
    !reference [.manual]
  script:
    - git clone https://github.com/DataDog/omnibus-nikos.git /tmp/omnibus-nikos
    - cd /tmp/omnibus-nikos
    - !reference [.setup_ruby_mirror_linux]
    - /bin/bash -l -c "bundle install"
    - /bin/bash -l -c "export NIKOS_INSTALL_DIR=$NIKOS_INSTALL_DIR && bundle exec omnibus build nikos"
    - cd $NIKOS_EMBEDDED_PATH
    - cp lib/glib-2.0/include/glibconfig.h include
    - tar czf nikos.tar.gz *
    - $S3_CP_CMD nikos.tar.gz $S3_PERMANENT_ARTIFACTS_URI/nikos-$ARCH.tar.gz

build_omnibus-nikos_x64:
  extends: .build_omnibus-nikos_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/omnibus-nikos_x64:$DATADOG_AGENT_NIKOS_BUILDIMAGES
  tags: ["runner:main"]
  variables:
    ARCH: amd64

build_omnibus-nikos_arm64:
  extends: .build_omnibus-nikos_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/omnibus-nikos_arm64:$DATADOG_AGENT_NIKOS_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

build_vcpkg_deps:
  stage: deps_build
  tags: ["runner:windows-docker", "windowsversion:1809"]
  variables:
    ARCH: "x64"
  before_script:
    - $vcpkgBlobSaSUrl = (aws ssm get-parameter --region us-east-1 --name ci.datadog-agent-buildimages.vcpkg_blob_sas_url --with-decryption --query "Parameter.Value" --out text)
  script:
    - $ErrorActionPreference = "Stop"
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - if (Test-Path build-out) { remove-item -recurse -force build-out }
    - docker run --rm -m 4096M -v "$(Get-Location):c:\mnt" -e VCPKG_BINARY_SOURCES="clear;x-azblob,${vcpkgBlobSaSUrl},readwrite" 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_1809_${ARCH}:${Env:DATADOG_AGENT_WINBUILDIMAGES} C:\mnt\tasks\winbuildscripts\build_vcpkg_deps.bat
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

build_processed_btfhub_archive:
  rules:
    !reference [.manual]
  stage: deps_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/btf-gen:$DATADOG_AGENT_BTF_GEN_BUILDIMAGES
  tags: ["runner:main"]
  script:
    - git clone https://github.com/aquasecurity/btfhub-archive.git
    - cd btfhub-archive
    # Flatten btfhub-archive directories & separate arm/x64 btfs into separate directories
    - dirs=("amzn/2" "centos/7" "centos/8" "debian/9" "debian/10" "fedora/29" "fedora/30" "fedora/31" "oracle-linux/ol7")
    - |
      for dir in ${dirs[@]}; do                                         \
        platform=${dir%%/*}                                           &&\
        mkdir -p "btfs-amd64/${platform}" "btfs-arm64/${platform}"    &&\
        eval "mv ${dir}/x86_64/*.btf.tar.xz btfs-amd64/${platform}/"  &&\
        eval "mv ${dir}/arm64/*.btf.tar.xz btfs-arm64/${platform}/";    \
      done
    # Handle the amzn/1 directory separately because it doesn't have an arm64 version
    - mv amzn/1/x86_64/* btfs-amd64/amzn/
    # Handle ubuntu separately because we want to keep the btfs separated by ubuntu version
    - mkdir -p btfs-amd64/ubuntu/18.04 btfs-amd64/ubuntu/20.04 btfs-arm64/ubuntu/18.04 btfs-arm64/ubuntu/20.04
    - mv ubuntu/18.04/x86_64/*.btf.tar.xz btfs-amd64/ubuntu/18.04/
    - mv ubuntu/20.04/x86_64/*.btf.tar.xz btfs-amd64/ubuntu/20.04/
    - mv ubuntu/18.04/arm64/*.btf.tar.xz btfs-arm64/ubuntu/18.04/
    - mv ubuntu/20.04/arm64/*.btf.tar.xz btfs-arm64/ubuntu/20.04/
    # Clean up platform names to match the names we get at runtime from gopsutil
    - mv btfs-amd64/amzn btfs-amd64/amazon
    - mv btfs-arm64/amzn btfs-arm64/amazon
    - mv btfs-amd64/oracle-linux btfs-amd64/oracle
    - mv btfs-arm64/oracle-linux btfs-arm64/oracle
    # Store results in S3
    - tar -czf btfs-arm64.tar.gz btfs-arm64
    - tar -czf btfs-amd64.tar.gz btfs-amd64
    - $S3_CP_CMD btfs-arm64.tar.gz $S3_PERMANENT_ARTIFACTS_URI/btfs-arm64.tar.gz
    - $S3_CP_CMD btfs-amd64.tar.gz $S3_PERMANENT_ARTIFACTS_URI/btfs-amd64.tar.gz
  artifacts:
    expire_in: 2 weeks
    paths:
      - btfhub-archive/btfs-arm64.tar.gz
      - btfhub-archive/btfs-amd64.tar.gz

.build_microvm_filesystem_common:
  rules:
    !reference [.manual]
  stage: deps_build
  before_script:
    - rm -r "$CI_BUILDS_DIR/fsbase" || true
  script:
    # base for new deb environment
    - mkdir $FSBASE
    # Build image
    - dd if=/dev/zero of=$RELEASE_IMG bs=1 count=0 seek=$IMG_SIZE
    - mkfs.ext2 -F $RELEASE_IMG
    # Mount image to fsbase
    - chmod 0755 $FSBASE
    - mount -o exec,loop $RELEASE_IMG $FSBASE
    # build debian environment with deboostrap
    - debootstrap --arch=$DEBARCH --include=$PREINSTALL_PKGS --components=bullseye,bullseye-backports,bullseye-security,main,contrib,non-free bullseye $FSBASE
    # enable promptless ssh to machine for root
    - sed -i '/^root/ {{ s/:x:/::/ }}' $FSBASE/etc/passwd
    # set defaults
    - echo 'T0:23:respawn:/sbin/getty -L ttyS0 115200 vt100' | tee -a $FSBASE/etc/inittab
    - '/dev/root / ext4 defaults 0 0' | tee -a $FSBASE/etc/fstab
    - echo 'debugfs /sys/kernel/debug debugfs defaults 0 0' | tee -a $FSBASE/etc/fstab
    - echo 'mount -t tracefs nodev /sys/kernel/tracing' | tee -a $FSBASE/etc/fstab
    - echo 'binfmt_misc /proc/sys/fs/binfmt_misc binfmt_misc defaults 0 0' | tee -a $FSBASE/etc/fstab
    - echo -en "127.0.0.1\tlocalhost\n" | tee $FSBASE/etc/hosts
    - echo "nameserver 8.8.8.8" | tee -a $FSBASE/etc/resolv.conf
    - echo "ddvm" | tee $FSBASE/etc/hostname
    - echo -en "127.0.1.1\tddvm\n" | tee -a $FSBASE/etc/hosts
    # Setup dev env
    ## Add repositories
    - echo "${SOURCE_LIST}" | tee $FSBASE/etc/apt/sources.list
    ## Setup clang
    - mkdir $FSBASE/opt/clang
    - wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-{CLANG_LLVM_VER}/clang+llvm-{CLANG_LLVM_VER}-x86_64-linux-gnu-ubuntu-16.04.tar.xz -O $FSBASE/opt/clang.tar.xz
    - echo "6b3cc55d3ef413be79785c4dc02828ab3bd6b887872b143e3091692fc6acefe7  ${FSBASE}/opt/clang.tar.xz" | sha256sum --check
    - tar xf $FSBASE/opt/clang/clang.tar.xz --strip-components=1 -C $FSBASE/opt/clang
    - echo 'PATH=$PATH:/opt/clang/bin' | tee -a $FSBASE/root/.bashrc
    ## Setup golang
    - curl -sL -o $FSBASE/usr/bin/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
    - chmod +x $FSBASE/usr/bin/gimme
    - chroot $FSBASE/ /bin/bash -c 'gimme 1.18.1'
    - echo "eval \$(gimme 1.18.1)" | tee /root/.bashrc
    ## Setup agent env
    - mkdir $FSBASE/etc/datadog-agent
    - mkdir -p $FSBASE/opt/datadog-agent/run
    - echo "system_probe_config:\n  enabled: true\n" | tee $FSBASE/etc/datadog-agent/system-probe.yaml
    - mkdir -p $FSBASE/opt/datadog-agent/embedded/nikos/embedded
    - mkdir -p $FSBASE/opt/datadog-agent/embedded/bin
    - echo "-r https://raw.githubusercontent.com/DataDog/datadog-agent-buildimages/main/requirements.txt" | tee > /tmp/requirements.txt
    - chroot $FSBASE/ /bin/bash -c 'pip install -r /tmp/requirements'
    # Unmount
    - umount $FSBASE
    # Convert to qcow2 format
    - qemu-img convert -f raw -O qcow2 $RELEASE_IMG "$QCOW2_IMG.$DEBARCH.$IMAGE_VERSION"
    - rm $RELEASE_IMG
    - tar -czvf $ARCHIVE_NAME $QCOW2_IMG
    # Upload qcow2 image to S3 bucket
    - $S3_CP_CMD $ARCHIVE_NAME $S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI/${ARCHIVE_NAME} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  timeout: 2h 00m

build_microvm_filesystem_x64:
  extends: .build_microvm_filesystem_common
  tags: ["runner:main"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/kernel-version-testing_x64:$DATADOG_AGENT_KERNEL_VERSION_TESTING_X64_BUILDIMAGES
  variables:
    IMAGE_VERSION: "0.1"
    DEBARCH: "amd64"
    RELEASE_IMG: bullseye.img
    QCOW2_IMG: bullseye.qcow2
    ARCHIVE_NAME: $QCOW2_IMG.$DEBARCH-$IMAGE_VERSION.tar.gz 
    FSBASE: "$CI_BUILDS_DIR/fsbase"
    IMG_SIZE: 10G
    PREINSTALL_PKGS: bison,cmake,curl,flex,g++,gcc,gcc-multilib,git,libbpf-dev,libedit-dev,libelf-dev,libfl-dev,libstdc++-10-dev,libtinfo-dev,libtinfo5,libxml2-dev,libzip-dev,linux-libc-dev,make,ninja-build,patch,pkg-config,python3-distro,python3-distutils,python3-netaddr,python3-setuptools,python3-pip,python3-pyroute2,python3-dev,wget,xz-utils
    SOURCE_LIST: |
    deb http://deb.debian.org/debian bullseye main
    deb-src http://deb.debian.org/debian bullseye main
    
    deb http://deb.debian.org/debian-security/ bullseye-security main
    deb-src http://deb.debian.org/debian-security/ bullseye-security main
    
    deb http://deb.debian.org/debian bullseye-updates main
    deb-src http://deb.debian.org/debian bullseye-updates main

build_microvm_filesystem_arm64:
  extends: .build_microvm_filesystem_common
  tags: ["runner:docker-arm", "platform:arm64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/kernel-version-testing_arm64:$DATADOG_AGENT_KERNEL_VERSION_TESTING_ARM64_BUILDIMAGES
  variables:
    IMAGE_VERSION: "0.1"
    DEBARCH: "arm64"
    RELEASE_IMG: bullseye.img
    QCOW2_IMG: bullseye.qcow2
    FSBASE: "$CI_BUILDS_DIR/fsbase"
    IMG_SIZE: 10G
    PREINSTALL_PKGS: bison,cmake,curl,flex,g++,gcc,gcc-multilib,git,libbpf-dev,libedit-dev,libelf-dev,libfl-dev,libstdc++-10-dev,libtinfo-dev,libtinfo5,libxml2-dev,libzip-dev,linux-libc-dev,make,ninja-build,patch,pkg-config,python3-distro,python3-distutils,python3-netaddr,python3-setuptools,python3-pip,python3-pyroute2,python3-dev,wget,xz-utils
    SOURCE_LIST: |
    deb http://deb.debian.org/debian bullseye main
    deb-src http://deb.debian.org/debian bullseye main
    
    deb http://deb.debian.org/debian-security/ bullseye-security main
    deb-src http://deb.debian.org/debian-security/ bullseye-security main
    
    deb http://deb.debian.org/debian bullseye-updates main
    deb-src http://deb.debian.org/debian bullseye-updates main
